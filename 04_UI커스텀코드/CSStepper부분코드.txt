CSStepper클래스의 setup()메서드 코드 

    private func setup() {
        self.leftBtn.tag = -1
        self.leftBtn.setTitle("↓", for: .normal)
        self.leftBtn.titleLabel?.font =
            UIFont.boldSystemFont(ofSize: 20)
        self.leftBtn.layer.borderWidth = borderWidth
        self.leftBtn.layer.borderColor = borderColor
        
        self.rightBtn.tag = 1
        self.rightBtn.setTitle("↑", for: .normal)
        self.rightBtn.titleLabel?.font =
            UIFont.boldSystemFont(ofSize: 20)
        self.rightBtn.layer.borderWidth = borderWidth
        self.rightBtn.layer.borderColor = borderColor
        
        self.centerLabel.text = String(value)
        self.centerLabel.font = UIFont.systemFont(ofSize: 16)
        self.centerLabel.textAlignment = .center
        self.centerLabel.backgroundColor = UIColor.cyan
        self.centerLabel.layer.borderWidth = borderWidth
        self.centerLabel.layer.borderColor = borderColor
        
        self.addSubview(self.leftBtn)
        self.addSubview(self.rightBtn)
        self.addSubview(self.centerLabel)
    }



    override func layoutSubviews() {
        super.layoutSubviews()
        
        //버튼의 너비 = 뷰 높이
        let btnWidth = self.frame.height
        //레이블의 너비 = 뷰 전체 크기 - 양쪽 버튼의 너비 합
        let lblWidth = self.frame.width - (btnWidth * 2)
        
        self.leftBtn.frame =
            CGRect(x:0, y:0, width: btnWidth, height:btnWidth)
        self.centerLabel.frame =
            CGRect(x: btnWidth, y: 0, width: lblWidth,
                   height: btnWidth)
        self.rightBtn.frame = CGRect(x: btnWidth+lblWidth, y: 0,
                   width: btnWidth, height: btnWidth)
        
        
    }


(전체 완성된 CSStepper.swift파일의 코드) 
import UIKit

@IBDesignable
public class CSStepper: UIControl {
    
    //좌측버튼
    public var leftBtn = UIButton(type: .system)
    //우측버튼
    public var rightBtn = UIButton(type: .system)
    //중앙 레이블
    public var centerLabel = UILabel()
    
    //스테퍼의 현재값을 저장할 변수
    @IBInspectable
    public var value: Int = 0 {
        //프로퍼티의 값이 바뀌면 자동으로 호출
        didSet {
            self.centerLabel.text = String(value)
            
            self.sendActions(for: .valueChanged)
        }
    }
    
    //증감값 단위
    @IBInspectable
    public var stepValue: Int = 1
    
    //최대값과 최소값
    @IBInspectable public var maximumValue: Int = 100
    @IBInspectable public var minimumValue: Int = -100
    
    //테두리 두께값 상수
    let borderWidth: CGFloat = 0.5
    //테두리 색상값
    let borderColor = UIColor.blue.cgColor
    
    //스토리보드에서 호출할 초기화 메서드
    public required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    @objc public func valueChange(_ sender: UIButton) {
        //스터퍼의 값을 변경하기 전에 미리 최소값과 최대값 범위를 벗어나지 않는지 체크한다.
        let sum = self.value + (sender.tag * self.stepValue)
        if sum > self.maximumValue {
            return
        }
        if sum < self.minimumValue {
            return
        }
        
        self.value += (sender.tag * self.stepValue)
    }
    
    //좌측 버튼의 타이틀 속성
    @IBInspectable
    public var leftTitle: String = "↓" {
        didSet {
            self.leftBtn.setTitle(leftTitle, for: .normal)
        }
    }
    
    //우측 버튼의 타이틀 속성
    @IBInspectable
    public var rightTitle: String = "↑" {
        didSet {
            self.rightBtn.setTitle(rightTitle, for: .normal)
        }
    }
    
    //센터 영역의 색상
    @IBInspectable
    public var bgColor: UIColor = UIColor.cyan {
        didSet {
            self.centerLabel.backgroundColor = backgroundColor
        }
    }
    
    
    
    private func setup() {
        //여기에 스테퍼의 기본 속성을 설정한다.
        //좌측 다운 버튼 속성 설정
        self.leftBtn.tag = -1   //태그값에 -1을 부여
        //버튼의 타이틀 (ctrl + cmd + space를 누르면 특수문자 목록 나옴)
        self.leftBtn.setTitle(self.leftTitle, for: .normal)
        //버튼 타이틀의 폰트
        self.leftBtn.titleLabel?.font =
            UIFont.boldSystemFont(ofSize: 20)
        //버튼 테두리 두께
        self.leftBtn.layer.borderWidth = borderWidth
        //버튼 테두리 색상 - 파란색
        self.leftBtn.layer.borderColor =
        borderColor
        
        //우측 업 버튼 속성
        //태그값에 1을 부여
        self.rightBtn.tag = 1
        //버튼의 타이틀 (ctrl + cmd + space를 누르면 특수문자 목록 나옴)
        self.rightBtn.setTitle(self.rightTitle, for: .normal)
        //버튼 타이틀의 폰트
        self.rightBtn.titleLabel?.font =
            UIFont.boldSystemFont(ofSize: 20)
        //버튼 테두리 두께
        self.rightBtn.layer.borderWidth = borderWidth
        //버튼 테두리 색상 - 파란색
        self.rightBtn.layer.borderColor =
        borderColor
        
        //중앙 레이블 속성 설정
        //컨트롤의 현재값을 문자열로 변환하여 표시
        self.centerLabel.text = String(value)
        self.centerLabel.font = UIFont.systemFont(ofSize: 16)
        self.centerLabel.textAlignment = .center
        //배경색상 지정
        self.centerLabel.backgroundColor = self.bgColor
        self.centerLabel.layer.borderWidth = borderWidth
        self.centerLabel.layer.borderColor = borderColor
        //영역별 객체를 서브뷰로 추가한다.
        self.addSubview(self.leftBtn)
        self.addSubview(self.rightBtn)
        self.addSubview(self.centerLabel)
        
        // 버튼의 터치 이벤트와 valueChange(_:) 메소드를 연결한다.
        self.leftBtn.addTarget(self, action: #selector(valueChange(_:)), for: .touchUpInside)
        self.rightBtn.addTarget(self, action: #selector(valueChange(_:)), for: .touchUpInside)
        
    }
    
    //프로그래밍 방식으로 호출할 초기화 메서드
    public override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    public override func layoutSubviews() {
        super.layoutSubviews()
        
        //버튼의 너비 = 뷰 높이
        let btnWidth = self.frame.height
        //레이블의 너비 = 뷰 전체 크기 - 양쪽 버튼의 너비 합
        let lblWidth = self.frame.width - (btnWidth * 2)
        
        self.leftBtn.frame =
            CGRect(x:0, y:0, width: btnWidth, height:btnWidth)
        self.centerLabel.frame =
            CGRect(x: btnWidth, y: 0, width: lblWidth,
                   height: btnWidth)
        self.rightBtn.frame = CGRect(x: btnWidth+lblWidth, y: 0,
                                     width: btnWidth, height: btnWidth)
        
        
    }
    
}

(ViewController.swift 완성된 코드)
//
//  ViewController.swift
//  DemoCSStepper
//
//  Created by papasmf on 2018. 9. 11..
//  Copyright © 2018년 multicampus. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        //CSStepper객체 정의
        let stepper = CSStepper()
        stepper.frame = CGRect(x: 30, y: 100, width: 130, height: 30)
        
        //valueChange이벤트가 발생하면 loggin(_:)메서드가 호출되도록
        stepper.addTarget(self,
                          action: #selector(logging(_:)), for: .valueChanged)
        
        self.view.addSubview(stepper)
    }
    
    //이벤트 처리를 위한 메서드 추가
    @objc func logging(_ sender: CSStepper) {
        print("현재 스테퍼의 값은 \(sender.value)입니다")
    }
    
}




